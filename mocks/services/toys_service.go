// Code generated by MockGen. DO NOT EDIT.
// Source: services.go
//
// Generated by this command:
//
//	mockgen -source=services.go -destination=../../mocks/services/toys_service.go -package=mockservices -exclude_interfaces=SsoService,EmailsService,TicketsService
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	context "context"
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-notifications/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockToysService is a mock of ToysService interface.
type MockToysService struct {
	ctrl     *gomock.Controller
	recorder *MockToysServiceMockRecorder
	isgomock struct{}
}

// MockToysServiceMockRecorder is the mock recorder for MockToysService.
type MockToysServiceMockRecorder struct {
	mock *MockToysService
}

// NewMockToysService creates a new mock instance.
func NewMockToysService(ctrl *gomock.Controller) *MockToysService {
	mock := &MockToysService{ctrl: ctrl}
	mock.recorder = &MockToysServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToysService) EXPECT() *MockToysServiceMockRecorder {
	return m.recorder
}

// GetAllCategories mocks base method.
func (m *MockToysService) GetAllCategories(ctx context.Context) ([]entities.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx)
	ret0, _ := ret[0].([]entities.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockToysServiceMockRecorder) GetAllCategories(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockToysService)(nil).GetAllCategories), ctx)
}

// GetAllMasters mocks base method.
func (m *MockToysService) GetAllMasters(ctx context.Context) ([]entities.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMasters", ctx)
	ret0, _ := ret[0].([]entities.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMasters indicates an expected call of GetAllMasters.
func (mr *MockToysServiceMockRecorder) GetAllMasters(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMasters", reflect.TypeOf((*MockToysService)(nil).GetAllMasters), ctx)
}

// GetAllTags mocks base method.
func (m *MockToysService) GetAllTags(ctx context.Context) ([]entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTags", ctx)
	ret0, _ := ret[0].([]entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTags indicates an expected call of GetAllTags.
func (mr *MockToysServiceMockRecorder) GetAllTags(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTags", reflect.TypeOf((*MockToysService)(nil).GetAllTags), ctx)
}

// GetAllToys mocks base method.
func (m *MockToysService) GetAllToys(ctx context.Context) ([]entities.Toy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllToys", ctx)
	ret0, _ := ret[0].([]entities.Toy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllToys indicates an expected call of GetAllToys.
func (mr *MockToysServiceMockRecorder) GetAllToys(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllToys", reflect.TypeOf((*MockToysService)(nil).GetAllToys), ctx)
}

// GetCategoryByID mocks base method.
func (m *MockToysService) GetCategoryByID(ctx context.Context, id uint32) (*entities.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", ctx, id)
	ret0, _ := ret[0].(*entities.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID.
func (mr *MockToysServiceMockRecorder) GetCategoryByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockToysService)(nil).GetCategoryByID), ctx, id)
}

// GetMasterByID mocks base method.
func (m *MockToysService) GetMasterByID(ctx context.Context, id uint64) (*entities.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterByID", ctx, id)
	ret0, _ := ret[0].(*entities.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterByID indicates an expected call of GetMasterByID.
func (mr *MockToysServiceMockRecorder) GetMasterByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterByID", reflect.TypeOf((*MockToysService)(nil).GetMasterByID), ctx, id)
}

// GetMasterByUser mocks base method.
func (m *MockToysService) GetMasterByUser(ctx context.Context, userID uint64) (*entities.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterByUser", ctx, userID)
	ret0, _ := ret[0].(*entities.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterByUser indicates an expected call of GetMasterByUser.
func (mr *MockToysServiceMockRecorder) GetMasterByUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterByUser", reflect.TypeOf((*MockToysService)(nil).GetMasterByUser), ctx, userID)
}

// GetMasterToys mocks base method.
func (m *MockToysService) GetMasterToys(ctx context.Context, masterID uint64) ([]entities.Toy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterToys", ctx, masterID)
	ret0, _ := ret[0].([]entities.Toy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMasterToys indicates an expected call of GetMasterToys.
func (mr *MockToysServiceMockRecorder) GetMasterToys(ctx, masterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterToys", reflect.TypeOf((*MockToysService)(nil).GetMasterToys), ctx, masterID)
}

// GetTagByID mocks base method.
func (m *MockToysService) GetTagByID(ctx context.Context, id uint32) (*entities.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByID", ctx, id)
	ret0, _ := ret[0].(*entities.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByID indicates an expected call of GetTagByID.
func (mr *MockToysServiceMockRecorder) GetTagByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByID", reflect.TypeOf((*MockToysService)(nil).GetTagByID), ctx, id)
}

// GetToyByID mocks base method.
func (m *MockToysService) GetToyByID(ctx context.Context, id uint64) (*entities.Toy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToyByID", ctx, id)
	ret0, _ := ret[0].(*entities.Toy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToyByID indicates an expected call of GetToyByID.
func (mr *MockToysServiceMockRecorder) GetToyByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToyByID", reflect.TypeOf((*MockToysService)(nil).GetToyByID), ctx, id)
}

// GetUserToys mocks base method.
func (m *MockToysService) GetUserToys(ctx context.Context, userID uint64) ([]entities.Toy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserToys", ctx, userID)
	ret0, _ := ret[0].([]entities.Toy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserToys indicates an expected call of GetUserToys.
func (mr *MockToysServiceMockRecorder) GetUserToys(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserToys", reflect.TypeOf((*MockToysService)(nil).GetUserToys), ctx, userID)
}
