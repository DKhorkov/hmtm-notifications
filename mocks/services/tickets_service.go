// Code generated by MockGen. DO NOT EDIT.
// Source: services.go
//
// Generated by this command:
//
//	mockgen -source=services.go -destination=../../mocks/services/tickets_service.go -package=mockservices -exclude_interfaces=ToysService,EmailsService,SsoService
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	context "context"
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-notifications/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockTicketsService is a mock of TicketsService interface.
type MockTicketsService struct {
	ctrl     *gomock.Controller
	recorder *MockTicketsServiceMockRecorder
	isgomock struct{}
}

// MockTicketsServiceMockRecorder is the mock recorder for MockTicketsService.
type MockTicketsServiceMockRecorder struct {
	mock *MockTicketsService
}

// NewMockTicketsService creates a new mock instance.
func NewMockTicketsService(ctrl *gomock.Controller) *MockTicketsService {
	mock := &MockTicketsService{ctrl: ctrl}
	mock.recorder = &MockTicketsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketsService) EXPECT() *MockTicketsServiceMockRecorder {
	return m.recorder
}

// GetAllTickets mocks base method.
func (m *MockTicketsService) GetAllTickets(ctx context.Context) ([]entities.RawTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTickets", ctx)
	ret0, _ := ret[0].([]entities.RawTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTickets indicates an expected call of GetAllTickets.
func (mr *MockTicketsServiceMockRecorder) GetAllTickets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTickets", reflect.TypeOf((*MockTicketsService)(nil).GetAllTickets), ctx)
}

// GetRespondByID mocks base method.
func (m *MockTicketsService) GetRespondByID(ctx context.Context, id uint64) (*entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRespondByID", ctx, id)
	ret0, _ := ret[0].(*entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRespondByID indicates an expected call of GetRespondByID.
func (mr *MockTicketsServiceMockRecorder) GetRespondByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRespondByID", reflect.TypeOf((*MockTicketsService)(nil).GetRespondByID), ctx, id)
}

// GetTicketByID mocks base method.
func (m *MockTicketsService) GetTicketByID(ctx context.Context, id uint64) (*entities.RawTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketByID", ctx, id)
	ret0, _ := ret[0].(*entities.RawTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketByID indicates an expected call of GetTicketByID.
func (mr *MockTicketsServiceMockRecorder) GetTicketByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketByID", reflect.TypeOf((*MockTicketsService)(nil).GetTicketByID), ctx, id)
}

// GetTicketResponds mocks base method.
func (m *MockTicketsService) GetTicketResponds(ctx context.Context, ticketID uint64) ([]entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketResponds", ctx, ticketID)
	ret0, _ := ret[0].([]entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketResponds indicates an expected call of GetTicketResponds.
func (mr *MockTicketsServiceMockRecorder) GetTicketResponds(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketResponds", reflect.TypeOf((*MockTicketsService)(nil).GetTicketResponds), ctx, ticketID)
}

// GetUserResponds mocks base method.
func (m *MockTicketsService) GetUserResponds(ctx context.Context, userID uint64) ([]entities.Respond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserResponds", ctx, userID)
	ret0, _ := ret[0].([]entities.Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserResponds indicates an expected call of GetUserResponds.
func (mr *MockTicketsServiceMockRecorder) GetUserResponds(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserResponds", reflect.TypeOf((*MockTicketsService)(nil).GetUserResponds), ctx, userID)
}

// GetUserTickets mocks base method.
func (m *MockTicketsService) GetUserTickets(ctx context.Context, userID uint64) ([]entities.RawTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTickets", ctx, userID)
	ret0, _ := ret[0].([]entities.RawTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTickets indicates an expected call of GetUserTickets.
func (mr *MockTicketsServiceMockRecorder) GetUserTickets(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTickets", reflect.TypeOf((*MockTicketsService)(nil).GetUserTickets), ctx, userID)
}
