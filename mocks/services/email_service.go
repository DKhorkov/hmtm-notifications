// Code generated by MockGen. DO NOT EDIT.
// Source: services.go
//
// Generated by this command:
//
//	mockgen -source=services.go -destination=../../mocks/services/email_service.go -package=mockservices -exclude_interfaces=ToysService,TicketsService,SsoService
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	context "context"
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-notifications/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockEmailsService is a mock of EmailsService interface.
type MockEmailsService struct {
	ctrl     *gomock.Controller
	recorder *MockEmailsServiceMockRecorder
	isgomock struct{}
}

// MockEmailsServiceMockRecorder is the mock recorder for MockEmailsService.
type MockEmailsServiceMockRecorder struct {
	mock *MockEmailsService
}

// NewMockEmailsService creates a new mock instance.
func NewMockEmailsService(ctrl *gomock.Controller) *MockEmailsService {
	mock := &MockEmailsService{ctrl: ctrl}
	mock.recorder = &MockEmailsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailsService) EXPECT() *MockEmailsServiceMockRecorder {
	return m.recorder
}

// GetUserCommunications mocks base method.
func (m *MockEmailsService) GetUserCommunications(ctx context.Context, userID uint64) ([]entities.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCommunications", ctx, userID)
	ret0, _ := ret[0].([]entities.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCommunications indicates an expected call of GetUserCommunications.
func (mr *MockEmailsServiceMockRecorder) GetUserCommunications(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCommunications", reflect.TypeOf((*MockEmailsService)(nil).GetUserCommunications), ctx, userID)
}

// SaveCommunication mocks base method.
func (m *MockEmailsService) SaveCommunication(ctx context.Context, email entities.Email) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCommunication", ctx, email)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCommunication indicates an expected call of SaveCommunication.
func (mr *MockEmailsServiceMockRecorder) SaveCommunication(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCommunication", reflect.TypeOf((*MockEmailsService)(nil).SaveCommunication), ctx, email)
}
