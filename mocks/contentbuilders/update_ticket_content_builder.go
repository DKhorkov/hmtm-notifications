// Code generated by MockGen. DO NOT EDIT.
// Source: content_builders.go
//
// Generated by this command:
//
//	mockgen -source=content_builders.go -destination=../../mocks/contentbuilders/update_ticket_content_builder.go -package=mockcontentbuilders -exclude_interfaces=ForgetPasswordContentBuilder,VerifyEmailContentBuilder,DeleteTicketContentBuilder
//

// Package mockcontentbuilders is a generated GoMock package.
package mockcontentbuilders

import (
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-notifications/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockUpdateTicketContentBuilder is a mock of UpdateTicketContentBuilder interface.
type MockUpdateTicketContentBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateTicketContentBuilderMockRecorder
	isgomock struct{}
}

// MockUpdateTicketContentBuilderMockRecorder is the mock recorder for MockUpdateTicketContentBuilder.
type MockUpdateTicketContentBuilderMockRecorder struct {
	mock *MockUpdateTicketContentBuilder
}

// NewMockUpdateTicketContentBuilder creates a new mock instance.
func NewMockUpdateTicketContentBuilder(ctrl *gomock.Controller) *MockUpdateTicketContentBuilder {
	mock := &MockUpdateTicketContentBuilder{ctrl: ctrl}
	mock.recorder = &MockUpdateTicketContentBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateTicketContentBuilder) EXPECT() *MockUpdateTicketContentBuilderMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockUpdateTicketContentBuilder) Body(ticket entities.RawTicket, respondOwner entities.User) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", ticket, respondOwner)
	ret0, _ := ret[0].(string)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockUpdateTicketContentBuilderMockRecorder) Body(ticket, respondOwner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockUpdateTicketContentBuilder)(nil).Body), ticket, respondOwner)
}

// Subject mocks base method.
func (m *MockUpdateTicketContentBuilder) Subject(ticket entities.RawTicket) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subject", ticket)
	ret0, _ := ret[0].(string)
	return ret0
}

// Subject indicates an expected call of Subject.
func (mr *MockUpdateTicketContentBuilderMockRecorder) Subject(ticket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subject", reflect.TypeOf((*MockUpdateTicketContentBuilder)(nil).Subject), ticket)
}
