// Code generated by MockGen. DO NOT EDIT.
// Source: content_builders.go
//
// Generated by this command:
//
//	mockgen -source=content_builders.go -destination=../../mocks/contentbuilders/verify_email_content_builder.go -package=mockcontentbuilders -exclude_interfaces=ForgetPasswordContentBuilder,UpdateTicketContentBuilder,DeleteTicketContentBuilder
//

// Package mockcontentbuilders is a generated GoMock package.
package mockcontentbuilders

import (
	reflect "reflect"

	entities "github.com/DKhorkov/hmtm-notifications/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockVerifyEmailContentBuilder is a mock of VerifyEmailContentBuilder interface.
type MockVerifyEmailContentBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockVerifyEmailContentBuilderMockRecorder
	isgomock struct{}
}

// MockVerifyEmailContentBuilderMockRecorder is the mock recorder for MockVerifyEmailContentBuilder.
type MockVerifyEmailContentBuilderMockRecorder struct {
	mock *MockVerifyEmailContentBuilder
}

// NewMockVerifyEmailContentBuilder creates a new mock instance.
func NewMockVerifyEmailContentBuilder(ctrl *gomock.Controller) *MockVerifyEmailContentBuilder {
	mock := &MockVerifyEmailContentBuilder{ctrl: ctrl}
	mock.recorder = &MockVerifyEmailContentBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerifyEmailContentBuilder) EXPECT() *MockVerifyEmailContentBuilderMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockVerifyEmailContentBuilder) Body(user entities.User) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", user)
	ret0, _ := ret[0].(string)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockVerifyEmailContentBuilderMockRecorder) Body(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockVerifyEmailContentBuilder)(nil).Body), user)
}

// Subject mocks base method.
func (m *MockVerifyEmailContentBuilder) Subject() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subject")
	ret0, _ := ret[0].(string)
	return ret0
}

// Subject indicates an expected call of Subject.
func (mr *MockVerifyEmailContentBuilderMockRecorder) Subject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subject", reflect.TypeOf((*MockVerifyEmailContentBuilder)(nil).Subject))
}
