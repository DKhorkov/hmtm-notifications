// Code generated by MockGen. DO NOT EDIT.
// Source: content_builders.go
//
// Generated by this command:
//
//	mockgen -source=content_builders.go -destination=../../mocks/contentbuilders/ticket_deleted_content_builder.go -package=mockcontentbuilders -exclude_interfaces=ForgetPasswordContentBuilder,TicketUpdatedContentBuilder,VerifyEmailContentBuilder
//

// Package mockcontentbuilders is a generated GoMock package.
package mockcontentbuilders

import (
	reflect "reflect"

	dto "github.com/DKhorkov/hmtm-notifications/dto"
	entities "github.com/DKhorkov/hmtm-notifications/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockTicketDeletedContentBuilder is a mock of TicketDeletedContentBuilder interface.
type MockTicketDeletedContentBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockTicketDeletedContentBuilderMockRecorder
	isgomock struct{}
}

// MockTicketDeletedContentBuilderMockRecorder is the mock recorder for MockTicketDeletedContentBuilder.
type MockTicketDeletedContentBuilderMockRecorder struct {
	mock *MockTicketDeletedContentBuilder
}

// NewMockTicketDeletedContentBuilder creates a new mock instance.
func NewMockTicketDeletedContentBuilder(ctrl *gomock.Controller) *MockTicketDeletedContentBuilder {
	mock := &MockTicketDeletedContentBuilder{ctrl: ctrl}
	mock.recorder = &MockTicketDeletedContentBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketDeletedContentBuilder) EXPECT() *MockTicketDeletedContentBuilderMockRecorder {
	return m.recorder
}

// Body mocks base method.
func (m *MockTicketDeletedContentBuilder) Body(ticketData dto.TicketDeletedDTO, ticketOwner, respondOwner entities.User) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Body", ticketData, ticketOwner, respondOwner)
	ret0, _ := ret[0].(string)
	return ret0
}

// Body indicates an expected call of Body.
func (mr *MockTicketDeletedContentBuilderMockRecorder) Body(ticketData, ticketOwner, respondOwner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Body", reflect.TypeOf((*MockTicketDeletedContentBuilder)(nil).Body), ticketData, ticketOwner, respondOwner)
}

// Subject mocks base method.
func (m *MockTicketDeletedContentBuilder) Subject(ticketData dto.TicketDeletedDTO) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subject", ticketData)
	ret0, _ := ret[0].(string)
	return ret0
}

// Subject indicates an expected call of Subject.
func (mr *MockTicketDeletedContentBuilderMockRecorder) Subject(ticketData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subject", reflect.TypeOf((*MockTicketDeletedContentBuilder)(nil).Subject), ticketData)
}
