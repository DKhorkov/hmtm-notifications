// Code generated by MockGen. DO NOT EDIT.
// Source: clients.go
//
// Generated by this command:
//
//	mockgen -source=clients.go -destination=../../mocks/clients/tickets_client.go -package=mockclients -exclude_interfaces=ToysClient,SsoClient
//

// Package mockclients is a generated GoMock package.
package mockclients

import (
	context "context"
	reflect "reflect"

	tickets "github.com/DKhorkov/hmtm-tickets/api/protobuf/generated/go/tickets"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockTicketsClient is a mock of TicketsClient interface.
type MockTicketsClient struct {
	ctrl     *gomock.Controller
	recorder *MockTicketsClientMockRecorder
	isgomock struct{}
}

// MockTicketsClientMockRecorder is the mock recorder for MockTicketsClient.
type MockTicketsClientMockRecorder struct {
	mock *MockTicketsClient
}

// NewMockTicketsClient creates a new mock instance.
func NewMockTicketsClient(ctrl *gomock.Controller) *MockTicketsClient {
	mock := &MockTicketsClient{ctrl: ctrl}
	mock.recorder = &MockTicketsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketsClient) EXPECT() *MockTicketsClientMockRecorder {
	return m.recorder
}

// CreateTicket mocks base method.
func (m *MockTicketsClient) CreateTicket(ctx context.Context, in *tickets.CreateTicketIn, opts ...grpc.CallOption) (*tickets.CreateTicketOut, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTicket", varargs...)
	ret0, _ := ret[0].(*tickets.CreateTicketOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockTicketsClientMockRecorder) CreateTicket(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockTicketsClient)(nil).CreateTicket), varargs...)
}

// DeleteRespond mocks base method.
func (m *MockTicketsClient) DeleteRespond(ctx context.Context, in *tickets.DeleteRespondIn, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRespond", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRespond indicates an expected call of DeleteRespond.
func (mr *MockTicketsClientMockRecorder) DeleteRespond(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRespond", reflect.TypeOf((*MockTicketsClient)(nil).DeleteRespond), varargs...)
}

// GetRespond mocks base method.
func (m *MockTicketsClient) GetRespond(ctx context.Context, in *tickets.GetRespondIn, opts ...grpc.CallOption) (*tickets.GetRespondOut, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRespond", varargs...)
	ret0, _ := ret[0].(*tickets.GetRespondOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRespond indicates an expected call of GetRespond.
func (mr *MockTicketsClientMockRecorder) GetRespond(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRespond", reflect.TypeOf((*MockTicketsClient)(nil).GetRespond), varargs...)
}

// GetTicket mocks base method.
func (m *MockTicketsClient) GetTicket(ctx context.Context, in *tickets.GetTicketIn, opts ...grpc.CallOption) (*tickets.GetTicketOut, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTicket", varargs...)
	ret0, _ := ret[0].(*tickets.GetTicketOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicket indicates an expected call of GetTicket.
func (mr *MockTicketsClientMockRecorder) GetTicket(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicket", reflect.TypeOf((*MockTicketsClient)(nil).GetTicket), varargs...)
}

// GetTicketResponds mocks base method.
func (m *MockTicketsClient) GetTicketResponds(ctx context.Context, in *tickets.GetTicketRespondsIn, opts ...grpc.CallOption) (*tickets.GetRespondsOut, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTicketResponds", varargs...)
	ret0, _ := ret[0].(*tickets.GetRespondsOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketResponds indicates an expected call of GetTicketResponds.
func (mr *MockTicketsClientMockRecorder) GetTicketResponds(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketResponds", reflect.TypeOf((*MockTicketsClient)(nil).GetTicketResponds), varargs...)
}

// GetTickets mocks base method.
func (m *MockTicketsClient) GetTickets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*tickets.GetTicketsOut, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTickets", varargs...)
	ret0, _ := ret[0].(*tickets.GetTicketsOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickets indicates an expected call of GetTickets.
func (mr *MockTicketsClientMockRecorder) GetTickets(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickets", reflect.TypeOf((*MockTicketsClient)(nil).GetTickets), varargs...)
}

// GetUserResponds mocks base method.
func (m *MockTicketsClient) GetUserResponds(ctx context.Context, in *tickets.GetUserRespondsIn, opts ...grpc.CallOption) (*tickets.GetRespondsOut, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserResponds", varargs...)
	ret0, _ := ret[0].(*tickets.GetRespondsOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserResponds indicates an expected call of GetUserResponds.
func (mr *MockTicketsClientMockRecorder) GetUserResponds(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserResponds", reflect.TypeOf((*MockTicketsClient)(nil).GetUserResponds), varargs...)
}

// GetUserTickets mocks base method.
func (m *MockTicketsClient) GetUserTickets(ctx context.Context, in *tickets.GetUserTicketsIn, opts ...grpc.CallOption) (*tickets.GetTicketsOut, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserTickets", varargs...)
	ret0, _ := ret[0].(*tickets.GetTicketsOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTickets indicates an expected call of GetUserTickets.
func (mr *MockTicketsClientMockRecorder) GetUserTickets(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTickets", reflect.TypeOf((*MockTicketsClient)(nil).GetUserTickets), varargs...)
}

// RespondToTicket mocks base method.
func (m *MockTicketsClient) RespondToTicket(ctx context.Context, in *tickets.RespondToTicketIn, opts ...grpc.CallOption) (*tickets.RespondToTicketOut, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RespondToTicket", varargs...)
	ret0, _ := ret[0].(*tickets.RespondToTicketOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RespondToTicket indicates an expected call of RespondToTicket.
func (mr *MockTicketsClientMockRecorder) RespondToTicket(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToTicket", reflect.TypeOf((*MockTicketsClient)(nil).RespondToTicket), varargs...)
}

// UpdateRespond mocks base method.
func (m *MockTicketsClient) UpdateRespond(ctx context.Context, in *tickets.UpdateRespondIn, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRespond", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRespond indicates an expected call of UpdateRespond.
func (mr *MockTicketsClientMockRecorder) UpdateRespond(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRespond", reflect.TypeOf((*MockTicketsClient)(nil).UpdateRespond), varargs...)
}
