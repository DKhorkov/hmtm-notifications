// Code generated by MockGen. DO NOT EDIT.
// Source: usecases.go
//
// Generated by this command:
//
//	mockgen -source=usecases.go -destination=../../mocks/usecases/usecases.go -package=mockusecases
//

// Package mockusecases is a generated GoMock package.
package mockusecases

import (
	context "context"
	reflect "reflect"

	dto "github.com/DKhorkov/hmtm-notifications/dto"
	entities "github.com/DKhorkov/hmtm-notifications/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCases is a mock of UseCases interface.
type MockUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockUseCasesMockRecorder
	isgomock struct{}
}

// MockUseCasesMockRecorder is the mock recorder for MockUseCases.
type MockUseCasesMockRecorder struct {
	mock *MockUseCases
}

// NewMockUseCases creates a new mock instance.
func NewMockUseCases(ctrl *gomock.Controller) *MockUseCases {
	mock := &MockUseCases{ctrl: ctrl}
	mock.recorder = &MockUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCases) EXPECT() *MockUseCasesMockRecorder {
	return m.recorder
}

// GetUserEmailCommunications mocks base method.
func (m *MockUseCases) GetUserEmailCommunications(ctx context.Context, userID uint64) ([]entities.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEmailCommunications", ctx, userID)
	ret0, _ := ret[0].([]entities.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailCommunications indicates an expected call of GetUserEmailCommunications.
func (mr *MockUseCasesMockRecorder) GetUserEmailCommunications(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailCommunications", reflect.TypeOf((*MockUseCases)(nil).GetUserEmailCommunications), ctx, userID)
}

// SendDeleteTicketEmailCommunication mocks base method.
func (m *MockUseCases) SendDeleteTicketEmailCommunication(ctx context.Context, ticketData dto.DeleteTicketDTO) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDeleteTicketEmailCommunication", ctx, ticketData)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDeleteTicketEmailCommunication indicates an expected call of SendDeleteTicketEmailCommunication.
func (mr *MockUseCasesMockRecorder) SendDeleteTicketEmailCommunication(ctx, ticketData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDeleteTicketEmailCommunication", reflect.TypeOf((*MockUseCases)(nil).SendDeleteTicketEmailCommunication), ctx, ticketData)
}

// SendForgetPasswordEmailCommunication mocks base method.
func (m *MockUseCases) SendForgetPasswordEmailCommunication(ctx context.Context, userID uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendForgetPasswordEmailCommunication", ctx, userID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendForgetPasswordEmailCommunication indicates an expected call of SendForgetPasswordEmailCommunication.
func (mr *MockUseCasesMockRecorder) SendForgetPasswordEmailCommunication(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendForgetPasswordEmailCommunication", reflect.TypeOf((*MockUseCases)(nil).SendForgetPasswordEmailCommunication), ctx, userID)
}

// SendUpdateTicketEmailCommunication mocks base method.
func (m *MockUseCases) SendUpdateTicketEmailCommunication(ctx context.Context, ticketID uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUpdateTicketEmailCommunication", ctx, ticketID)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendUpdateTicketEmailCommunication indicates an expected call of SendUpdateTicketEmailCommunication.
func (mr *MockUseCasesMockRecorder) SendUpdateTicketEmailCommunication(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUpdateTicketEmailCommunication", reflect.TypeOf((*MockUseCases)(nil).SendUpdateTicketEmailCommunication), ctx, ticketID)
}

// SendVerifyEmailCommunication mocks base method.
func (m *MockUseCases) SendVerifyEmailCommunication(ctx context.Context, userID uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerifyEmailCommunication", ctx, userID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendVerifyEmailCommunication indicates an expected call of SendVerifyEmailCommunication.
func (mr *MockUseCasesMockRecorder) SendVerifyEmailCommunication(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerifyEmailCommunication", reflect.TypeOf((*MockUseCases)(nil).SendVerifyEmailCommunication), ctx, userID)
}
